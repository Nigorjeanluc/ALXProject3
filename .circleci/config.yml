version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
            --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm run migrations:revert
            fi
            
jobs:
  install-frontend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm i
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  install-backend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm i
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            # Your code here
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            # Your code here
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - attach_workspace:
          at: .
      # Your job code here
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Front-end test
          working_directory: ./frontend
          command: |
            npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - attach_workspace:
          at: .
      # Your job code here
      - run:
          name: Back-end test
          working_directory: ./backend
          command: |
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - attach_workspace:
          at: .
      # Your job code here
      - run:
          name: Front-end scan
          working_directory: ./frontend
          command: |
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - attach_workspace:
          at: .
      # Your job code here
      - run:
          name: Back-end scan
          working_directory: ./backend
          command: |
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: save the new back-end url to memory using memstach
          command: |
            backend_url=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            curl -H "Content-Type: text/plain" \
            -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
            --request PUT \
            --data "http://${backend_url}:3030" \
            https://api.memstash.io/values/backend_url
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: install tar and gzip to be able to presist files to workspace
          command: |
            yum install -y tar
            yum install -y gzip 
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production" 
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["45:44:e9:b4:35:84:f7:3f:e3:f9:5f:e5:a0:95:2a:b1"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            # Your code here
            cat  .circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure    
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: sleavely/node-awscli:14.x
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            # Your code here
            cat .env
            npm run build
            npm run migrations > migration_status
            cat migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            # Your code here
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration successful..."
              curl -H "Content-Type: text/plain" \
              -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
              --request PUT \
              --data "1" \
              https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed!!!"
              curl -H "Content-Type: text/plain" \
              -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
              --request PUT \
              --data "0" \
              https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: sleavely/node-awscli:14.x
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "Content-Type: text/plain" \
            -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
            --request GET \
            https://api.memstash.io/values/backend_url)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            # your code here
            npm run build 
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["45:44:e9:b4:35:84:f7:3f:e3:f9:5f:e5:a0:95:2a:b1"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./backend
          command: |
            # your code here
            cat ~/project/.circleci/ansible/inventory.txt
            npm run build 
            mkdir ~/project/.circleci/ansible/roles/deploy/files
            cp ./dist ~/project/.circleci/ansible/roles/deploy/files/dist -r
            cp ./node_modules ~/project/.circleci/ansible/roles/deploy/files/node_modules -r
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip3 install awscli
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            # your code here
            export backend_url=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
            --request GET https://api.memstash.io/values/backend_url)
            echo ${backend_url}
            curl "${backend_url}/api/status"
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       # your code here
      #       echo ${backend_url}
      #       curl "${backend_url}/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/index.html"
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: sleavely/node-awscli:14.x
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip curl
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yaml \
            --stack-name udapeople-cloudfront-production \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      # Docker image here
      - image: sleavely/node-awscli:14.x
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "Old workflow id: ${OldWorkflowID}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo "Stacks: ${STACKS}"
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            fi
            

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [scan-backend, scan-frontend, test-backend, test-frontend]
      # - deploy-infrastructure:
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]